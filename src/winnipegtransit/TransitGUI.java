/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package winnipegtransit;
import java.util.ArrayList;
import java.util.Date;
import org.json.JSONException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.io.IOException;

/**
 *
 * @author owen
 */
public class TransitGUI extends javax.swing.JFrame {
    
    //public dateFormat object for formatting the bus arrival time
    DateFormat tf = new SimpleDateFormat("h:mm");

    /**
     * Creates new form TransitGUI
     */
    public TransitGUI() throws IOException {
        initComponents();
        
        //sets the system time on the gui when the window first loads
        setTime();
    }
    
    //method used for setting the time on the GUI
    private void setTime() throws IOException
    {
        try
        {
            //storage for the current date and time
            Date queryDateTime;

            //formatting object for formatting the date for the gui
            DateFormat dayAndTime = new SimpleDateFormat("EEE, MMM, d  - h:mm a");            

            //get the time from the TransitConnection class and store it locally
            queryDateTime = TransitConnection.getTime();

            //set the time label on the gui, formatted using the date format object
            lblTime.setText(dayAndTime.format(queryDateTime));
        }
        catch (IOException iox)
        {
            //if an IO exception is caught at this point its due to the lack of a connection to the server
            tarSchedule.append("Connection to Winnipeg Transit servers could not be established.\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        author = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblStopNo = new javax.swing.JLabel();
        txtStop = new javax.swing.JTextField();
        btnCheck = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblLongitude = new javax.swing.JLabel();
        lblLatitude = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tarSchedule = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tarFeatures = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("Droid Sans", 1, 24)); // NOI18N
        title.setText("Winnipeg TransiTool");

        author.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        author.setText("Created By: Owen Peterson");

        lblStopNo.setFont(new java.awt.Font("Droid Sans", 0, 18)); // NOI18N
        lblStopNo.setText("Enter Stop Number:");

        txtStop.setBackground(new java.awt.Color(255, 255, 255));
        txtStop.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        txtStop.setToolTipText("");
        txtStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStopActionPerformed(evt);
            }
        });

        btnCheck.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        btnCheck.setText("Check!");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        jLabel1.setText("Stop Name:");

        lblName.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblName.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        jLabel2.setText("Latitude:");

        lblLongitude.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        lblLongitude.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLongitude.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblLatitude.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        lblLatitude.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLatitude.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        jLabel3.setText("Longitude:");

        jLabel4.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        jLabel4.setText("Stop Schedule:");

        tarSchedule.setColumns(20);
        tarSchedule.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        tarSchedule.setRows(5);
        jScrollPane1.setViewportView(tarSchedule);

        jLabel5.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        jLabel5.setText("Stop Features:");

        tarFeatures.setColumns(20);
        tarFeatures.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        tarFeatures.setRows(5);
        jScrollPane2.setViewportView(tarFeatures);

        jLabel6.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        jLabel6.setText("System Time:");

        lblTime.setFont(new java.awt.Font("Droid Sans", 0, 15)); // NOI18N
        lblTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTime.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(100, 100, 100)
                                .addComponent(lblStopNo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtStop, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 63, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(146, 146, 146)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(12, 12, 12))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStopNo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(lblLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        lblName.getAccessibleContext().setAccessibleName("lblName");
        lblLongitude.getAccessibleContext().setAccessibleName("lblLattitude");
        jLabel4.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 227, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(title)
                    .addComponent(author))
                .addGap(0, 227, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.CENTER, layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(author)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStopActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStopActionPerformed

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        
        //serval storage variables for information needed to populate the gui
        StopInfo stopInfo;
        Schedule schedule;
        String name;
        String latitude;
        String longitude;        
        ScheduleItem si = null;
        ArrayList<ScheduleItem> scheduleItems;
        ArrayList<BusArrival> busArrivals;
        ArrayList<StopFeature> stopFeatures;
        String busName;
        Date arrivalTime;
        StopFeature currentFeature;
        String featureName;
        int featureCount;
        
        if (evt.getSource() == btnCheck)
        {
            //when the check button is clicked
            try
            {    
                //update the time
                setTime();
                
                //tell the user that the check is occuring, just in case the connection is slow
                tarSchedule.setText("Checking stop information. Please wait...\n");

                //get the schedule from the transit connection class for the stop number taken from the gui
                schedule = TransitConnection.getScheduleInfo(this.txtStop.getText());                
                
                //extract individual objects from the schedule object
                stopInfo = schedule.getStopInfo();
                scheduleItems = schedule.getScheduleItems();
                stopFeatures = schedule.getStopFeatures();

                //extract values from the stopInfo object
                name = stopInfo.getName();
                latitude = stopInfo.getLatitude();
                longitude = stopInfo.getLongitude();
             
                //set the GUI lables to the extracted stopInfo values
                lblName.setText(name);
                lblLatitude.setText(latitude);
                lblLongitude.setText(longitude);
                
                //blank out the schedule
                tarSchedule.setText("");                
                
                //loop through each of the schedule items and print out thier contents
                for (int i = 0; i < scheduleItems.size(); i++)
                {
                    //gets the current schedule item
                    si = scheduleItems.get(i);
                    
                    //gets all of the bus arrivals for the current schedule item
                    busArrivals = si.getBusArrivals();
                    
                    //print out a header with the route name
                    tarSchedule.append(si.getRouteName() + "\n");
                    tarSchedule.append("--------------------------------------------------\n");
                    
                    //for every arriving bus
                    for (int j = 0; j < busArrivals.size(); j++)
                    {
                        //get the busses name and arrival time
                        busName = busArrivals.get(j).getBusName();
                        arrivalTime = busArrivals.get(j).getArrivalTime();
                        
                        //and print out a line with the information in the schedule box
                        tarSchedule.append(tf.format(arrivalTime) + " - " + busName + "\n");
                    }
                    
                    //add a line break between schedule items
                    tarSchedule.append("\n");
                }
                
                //if there are no stop features present, inform the user
                if (stopFeatures.isEmpty())
                {
                     tarFeatures.setText("This stop has no special features.");       
                }
                else
                {
                    //otherwise blank out the old features
                    tarFeatures.setText("");                
                
                    //and then for every stop feature
                    for (int i = 0; i < stopFeatures.size(); i++)
                    {
                        //extract values from the feature in scope
                        currentFeature = stopFeatures.get(i);
                        featureName = currentFeature.getName();
                        featureCount = currentFeature.getCount();

                        //sprinkle in a little pluralization
                        if (featureCount > 1 && featureName.equals("Bench"))
                        {
                            featureName += "es";
                        }

                        //and add the feature item to the Stop Features text area.
                        tarFeatures.append(featureCount + " " + featureName + "\n");                

                    }
                }
                
            }
            //handle any exceptions that may be caught.
            catch (IOException iox)
            {
                tarSchedule.append("\nInvalid stop number. Please enter a new number.\n");
            }
            catch (JSONException jex)
            {
               tarSchedule.append("\nApplication encountered a problem processing data from Winnipeg Transit.\n");
               jex.printStackTrace();
            }
            catch (NullPointerException nex)
            {
                tarSchedule.setText("Invalid stop number. Please enter a new number.\n");
            }
        }
    }//GEN-LAST:event_btnCheckActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransitGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransitGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransitGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransitGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try{
                    //try to open the gui object
                    new TransitGUI().setVisible(true);
                }
                //if an exception is caught, its likely due to the lack of a server connection
                catch (IOException iox)
                {
                    tarSchedule.setText("Connection to Winnipeg Transit servers could not be established.");
                }

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel author;
    private javax.swing.JButton btnCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblLatitude;
    private javax.swing.JLabel lblLongitude;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStopNo;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextArea tarFeatures;
    private static javax.swing.JTextArea tarSchedule;
    private javax.swing.JLabel title;
    private javax.swing.JTextField txtStop;
    // End of variables declaration//GEN-END:variables
}
